{"version":3,"sources":["components/GameStore.tsx","components/GameCard.tsx","components/Deck.tsx","components/SearchPanel.tsx","components/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["gamesResource","initalReducerState","searchTerm","games","SET_GAMES_ACTION","GamesSearchContext","React","createContext","gameReducer","state","arguments","length","undefined","action","type","Object","objectSpread","payload","GameStore","props","_useReducer","useReducer","_useReducer2","slicedToArray","_useReducer2$","dispatch","useEffect","fetch","then","res","json","data","filteredGames","filter","item","title","toLowerCase","includes","react_default","a","createElement","Provider","value","children","GameCard","description","image","className","alt","src","Deck","_ref","gamelist","map","components_GameCard","assign","key","id","SearchPanel","onSearchEvent","onChange","event","target","placeholder","Main","_useContext","useContext","components_SearchPanel","components_Deck","App","components_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8eb08e32.chunk.js","sourcesContent":["import React, { useReducer, useEffect } from \"react\";\r\nimport { gameProps } from \"./GameCard\";\r\n\r\nconst gamesResource = \"games.json\";\r\n\r\ninterface GamesContextState {\r\n  searchTerm: string;\r\n  games: gameProps[];\r\n  dispatch: React.Dispatch<any>;\r\n}\r\n\r\nconst getInitialState = () => ({\r\n  searchTerm: \"\",\r\n  games: []\r\n});\r\nconst initalReducerState = getInitialState();\r\n\r\nexport const SET_SEARCH_TERM_ACTION = \"setSearchTerm\";\r\nexport const SET_GAMES_ACTION = \"setGames\";\r\n\r\nexport const GamesSearchContext = React.createContext({} as GamesContextState);\r\n\r\nconst gameReducer = function(state = initalReducerState, action: any) {\r\n  switch (action.type) {\r\n    case SET_SEARCH_TERM_ACTION:\r\n      return { ...state, searchTerm: action.payload };\r\n    case SET_GAMES_ACTION:\r\n      return { ...state, games: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\ninterface GameSearchStoreProps {\r\n  children?: React.ReactNode;\r\n}\r\n\r\nexport default function GameStore(props: GameSearchStoreProps) {\r\n  const [{ searchTerm, games }, dispatch] = useReducer(\r\n    gameReducer,\r\n    initalReducerState\r\n  );\r\n\r\n  useEffect(() => {\r\n    fetch(gamesResource)\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        const filteredGames = data.filter(\r\n          (item: gameProps) =>\r\n            searchTerm === \"\" ||\r\n            item.title.toLowerCase().includes(searchTerm.toLowerCase())\r\n        );\r\n        dispatch({\r\n          type: SET_GAMES_ACTION,\r\n          payload: filteredGames\r\n        });\r\n      });\r\n  }, [searchTerm]);\r\n\r\n  return (\r\n    <GamesSearchContext.Provider value={{ searchTerm, games, dispatch }}>\r\n      {props.children}\r\n    </GamesSearchContext.Provider>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport interface gameProps {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  image: string;\r\n}\r\nconst imagesPath = \"images/\";\r\n\r\nconst GameCard = (props: gameProps) => {\r\n  const { title, description, image } = props;\r\n  return (\r\n    <div className=\"game\">\r\n      <img className=\"game-pic\" alt={title} src={imagesPath + image} />\r\n      <div className=\"game-title\">{title}</div>\r\n      <div className=\"game-description\">{description}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameCard;\r\n","import React from \"react\";\r\nimport GameCard, { gameProps } from \"./GameCard\";\r\n\r\ninterface DeckProps {\r\n  games: gameProps[];\r\n}\r\n\r\nconst Deck = ({ games }: DeckProps) => {\r\n  const gamelist = games.map((item: gameProps) => (\r\n    <GameCard key={item.id} {...item} />\r\n  ));\r\n  return <div className=\"gameList\">{gamelist}</div>;\r\n};\r\n\r\nexport default Deck;\r\n","import React from \"react\";\r\n\r\ninterface SearchPanelProps {\r\n  searchTerm: string;\r\n  onSearchEvent: (Searchterm: string) => void;\r\n}\r\n\r\nconst SearchPanel = ({ onSearchEvent, searchTerm }: SearchPanelProps) => {\r\n  const onSearchInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    onSearchEvent(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"search\">\r\n      <input\r\n        className=\"searchInput\"\r\n        value={searchTerm}\r\n        onChange={onSearchInputChange}\r\n        type=\"text\"\r\n        placeholder=\"Search\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchPanel;\r\n","import React, { useContext } from \"react\";\r\nimport Deck from \"./Deck\";\r\nimport { GamesSearchContext, SET_SEARCH_TERM_ACTION } from \"./GameStore\";\r\nimport SearchPanel from \"./SearchPanel\";\r\n\r\nconst Main: React.FC = () => {\r\n  const { games, searchTerm, dispatch } = useContext(GamesSearchContext);\r\n\r\n  const searchEventHandler = (searchTerm: string) => {\r\n    dispatch({ type: SET_SEARCH_TERM_ACTION, payload: searchTerm });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <SearchPanel searchTerm={searchTerm} onSearchEvent={searchEventHandler} />\r\n      <Deck games={games} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport GameStore from \"./components/GameStore\";\r\nimport Main from \"./components/Main\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <GameStore>\r\n      <Main />\r\n    </GameStore>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
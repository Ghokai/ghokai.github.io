{"version":3,"sources":["components/GameStore.tsx","components/GameCard.tsx","components/Deck.tsx","components/SearchPanel.tsx","components/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["gamesResource","initalReducerState","searchTerm","games","GamesSearchContext","React","createContext","gameReducer","state","arguments","length","undefined","action","type","Object","objectSpread","payload","GameStore","props","_useReducer","useReducer","_useReducer2","slicedToArray","_useReducer2$","dispatch","useEffect","fetch","then","res","json","data","filteredGames","filter","item","title","toLowerCase","includes","react_default","a","createElement","Provider","value","children","GameCard","description","image","className","alt","src","Deck","_ref","gamelist","map","components_GameCard","assign","key","id","SearchPanel","onSearchEvent","onChange","event","target","placeholder","Main","_useContext","useContext","components_SearchPanel","components_Deck","App","components_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.acc9ba49.chunk.js","sourcesContent":["import React, { useReducer, useEffect } from \"react\";\r\nimport { gameProps } from \"./GameCard\";\r\n\r\nconst gamesResource = \"games.json\";\r\n\r\ninterface GamesContextState {\r\n  searchTerm: string;\r\n  games: gameProps[];\r\n  dispatch: React.Dispatch<any>;\r\n}\r\n\r\nconst getInitialState = () => ({\r\n  searchTerm: \"\",\r\n  games: []\r\n});\r\nconst initalReducerState = getInitialState();\r\n\r\nexport const SET_SEARCH_TERM_ACTION = \"setSearchTerm\";\r\nexport const SET_GAMES_ACTION = \"setGames\";\r\n\r\nexport const GamesSearchContext = React.createContext({} as GamesContextState);\r\n\r\nconst gameReducer = function(state = initalReducerState, action: any) {\r\n  switch (action.type) {\r\n    case SET_SEARCH_TERM_ACTION:\r\n      return { ...state, searchTerm: action.payload };\r\n    case SET_GAMES_ACTION:\r\n      return { ...state, games: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\ninterface GameSearchStoreProps {\r\n  children?: React.ReactNode;\r\n}\r\n\r\nexport default function GameStore(props: GameSearchStoreProps) {\r\n  const [{ searchTerm, games }, dispatch] = useReducer(\r\n    gameReducer,\r\n    initalReducerState\r\n  );\r\n\r\n  useEffect(() => {\r\n    fetch(gamesResource)\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        const filteredGames = data.filter(\r\n          (item: gameProps) =>\r\n            searchTerm === \"\" ||\r\n            item.title.toLowerCase().includes(searchTerm.toLowerCase())\r\n        );\r\n        dispatch({\r\n          type: \"setGames\",\r\n          payload: filteredGames\r\n        });\r\n      });\r\n  }, [searchTerm]);\r\n\r\n  return (\r\n    <GamesSearchContext.Provider value={{ searchTerm, games, dispatch }}>\r\n      {props.children}\r\n    </GamesSearchContext.Provider>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport interface gameProps {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  image: string;\r\n}\r\nconst imagesPath = \"images/\";\r\n\r\nconst GameCard = (props: gameProps) => {\r\n  const { title, description, image } = props;\r\n  return (\r\n    <div className=\"game\">\r\n      <img className=\"game-pic\" alt={title} src={imagesPath + image} />\r\n      <div className=\"game-title\">{title}</div>\r\n      <div className=\"game-description\">{description}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameCard;\r\n","import React from \"react\";\r\nimport GameCard, { gameProps } from \"./GameCard\";\r\n\r\ninterface DeckProps {\r\n  games: gameProps[];\r\n}\r\n\r\nconst Deck = ({ games }: DeckProps) => {\r\n  const gamelist = games.map((item: gameProps) => (\r\n    <GameCard key={item.id} {...item} />\r\n  ));\r\n  return <div className=\"gameList\">{gamelist}</div>;\r\n};\r\n\r\nexport default Deck;\r\n","import React from \"react\";\r\n\r\ninterface SearchPanelProps {\r\n  searchTerm: string;\r\n  onSearchEvent: (Searchterm: string) => void;\r\n}\r\n\r\nconst SearchPanel = ({ onSearchEvent, searchTerm }: SearchPanelProps) => {\r\n  const onSearchInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    onSearchEvent(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"search\">\r\n      <input\r\n        className=\"searchInput\"\r\n        value={searchTerm}\r\n        onChange={onSearchInputChange}\r\n        type=\"text\"\r\n        placeholder=\"Search\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchPanel;\r\n","import React, { useContext } from \"react\";\r\nimport Deck from \"./Deck\";\r\nimport { GamesSearchContext, SET_SEARCH_TERM_ACTION } from \"./GameStore\";\r\nimport SearchPanel from \"./SearchPanel\";\r\n\r\nconst Main: React.FC = () => {\r\n  const { games, searchTerm, dispatch } = useContext(GamesSearchContext);\r\n\r\n  const searchEventHandler = (searchTerm: string) => {\r\n    dispatch({ type: SET_SEARCH_TERM_ACTION, payload: searchTerm });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <SearchPanel searchTerm={searchTerm} onSearchEvent={searchEventHandler} />\r\n      <Deck games={games} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport GameStore from \"./components/GameStore\";\nimport Main from \"./components/Main\";\n\nconst App: React.FC = () => {\n  return (\n    <GameStore>\n      <Main />\n    </GameStore>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["components/SearchPanel.tsx","components/Game.tsx","components/Deck.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SearchPanel","_ref","onSearchEvent","searchTerm","react_default","a","createElement","className","value","onChange","event","target","type","placeholder","Game","props","title","description","image","alt","src","Deck","gamelist","games","map","item","components_Game","Object","assign","key","id","App","_useState","useState","_useState2","slicedToArray","setGames","_useState3","_useState4","searchValue","setSearchValue","useEffect","fetch","then","res","json","data","filter","toLowerCase","includes","components_SearchPanel","components_Deck","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8NA0BeA,SAlBK,SAAAC,GAAqD,IAAlDC,EAAkDD,EAAlDC,cAAeC,EAAmCF,EAAnCE,WAKpC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,SACEC,UAAU,cACVC,MAAOL,EACPM,SATsB,SAACC,GAC3BR,EAAcQ,EAAMC,OAAOH,QASvBI,KAAK,OACLC,YAAY,cCCLC,EAXF,SAACC,GAAqB,IACzBC,EAA8BD,EAA9BC,MAAOC,EAAuBF,EAAvBE,YAAaC,EAAUH,EAAVG,MAC5B,OACEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWY,IAAKH,EAAOI,IANzB,UAM2CF,IACxDd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcS,GAC7BZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAoBU,KCF1BI,EAPF,SAAApB,GAA0B,IAC/BqB,EAD+BrB,EAAvBsB,MACSC,IAAI,SAACC,GAAD,OACzBrB,EAAAC,EAAAC,cAACoB,EAADC,OAAAC,OAAA,CAAMC,IAAKJ,EAAKK,IAAQL,MAE1B,OAAOrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYe,IC8BrBS,EAjCO,WAAM,IAAAC,EACAC,mBAAS,IADTC,EAAAP,OAAAQ,EAAA,EAAAR,CAAAK,EAAA,GACnBT,EADmBW,EAAA,GACZE,EADYF,EAAA,GAAAG,EAEYJ,mBAAS,IAFrBK,EAAAX,OAAAQ,EAAA,EAAAR,CAAAU,EAAA,GAEnBE,EAFmBD,EAAA,GAENE,EAFMF,EAAA,GAI1BG,oBAAU,WACRC,MAPkB,cAQfC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAI,OACRV,EACEU,EAAKC,OACH,SAACtB,GAAD,MACkB,KAAhBc,GACAd,EAAKT,MAAMgC,cAAcC,SAASV,EAAYS,qBAIvD,CAACT,IAMJ,OACEnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC4C,EAAD,CACE/C,WAAYoC,EACZrC,cARqB,SAACC,GAC1BqC,EAAerC,MASbC,EAAAC,EAAAC,cAAC6C,EAAD,CAAM5B,MAAOA,MCxBC6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.26b8b0ec.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { string } from \"prop-types\";\r\n\r\ninterface SearchPanelProps {\r\n  searchTerm: string;\r\n  onSearchEvent: (Searchterm: string) => void;\r\n}\r\n\r\nconst SearchPanel = ({ onSearchEvent, searchTerm }: SearchPanelProps) => {\r\n  const onSearchInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    onSearchEvent(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"search\">\r\n      <input\r\n        className=\"searchInput\"\r\n        value={searchTerm}\r\n        onChange={onSearchInputChange}\r\n        type=\"text\"\r\n        placeholder=\"Search\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchPanel;\r\n","import React from \"react\";\r\n\r\nexport interface gameProps {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  image: string;\r\n}\r\nconst imagesPath = \"images/\";\r\n\r\nconst Game = (props: gameProps) => {\r\n  const { title, description, image } = props;\r\n  return (\r\n    <div className=\"game\">\r\n      <img className=\"game-pic\" alt={title} src={imagesPath + image} />\r\n      <div className=\"game-title\">{title}</div>\r\n      <div className=\"game-description\">{description}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import React from \"react\";\r\nimport Game, { gameProps } from \"./Game\";\r\n\r\ninterface DeckProps {\r\n  games: gameProps[];\r\n}\r\n\r\nconst Deck = ({ games }: DeckProps) => {\r\n  const gamelist = games.map((item: gameProps) => (\r\n    <Game key={item.id} {...item} />\r\n  ));\r\n  return <div className=\"gameList\">{gamelist}</div>;\r\n};\r\n\r\nexport default Deck;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Game, { gameProps } from \"./components/Game\";\nimport SearchPanel from \"./components/SearchPanel\";\nimport Deck from \"./components/Deck\";\n\nconst gamesResource = \"games.json\";\n\nconst App: React.FC = () => {\n  const [games, setGames] = useState([]);\n  const [searchValue, setSearchValue] = useState(\"\");\n\n  useEffect(() => {\n    fetch(gamesResource)\n      .then(res => res.json())\n      .then(data =>\n        setGames(\n          data.filter(\n            (item: gameProps) =>\n              searchValue === \"\" ||\n              item.title.toLowerCase().includes(searchValue.toLowerCase())\n          )\n        )\n      );\n  }, [searchValue]);\n\n  const searchEventHandler = (searchTerm: string) => {\n    setSearchValue(searchTerm);\n  };\n\n  return (\n    <div className=\"container\">\n      <SearchPanel\n        searchTerm={searchValue}\n        onSearchEvent={searchEventHandler}\n      />\n      <Deck games={games} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["api/index.ts","store/actions.ts","components/MovieItem.tsx","components/MovieDeck.tsx","components/Header.tsx","components/Main.tsx","store/reducers.ts","store/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["_callee","response","data","regenerator_default","a","wrap","_context","prev","next","fetch","sent","json","abrupt","stop","LOAD_MOVIES_ACTION","RATE_MOVIE_BY_ID_ACTION","RATE_MOVIE_BY_INDEX_ACTION","SET_RANDOM_RATING_ACTION","SET_SEARCH_TERM_ACTON","fetchMoviesAction","dispatch","_fetchMovies","apply","this","arguments","fetchMovies","then","movies","type","payload","catch","err","console","log","rateItemRandomly","getState","randomTimeMS","getRandomValue","setTimeout","state","randomItemIndex","movieList","length","randomRateValue","israndomRatingActive","randomIndex","randomRating","range","baseValue","Math","round","random","Meta","Card","desc","React","memo","props","useDispatch","rateMovie","useCallback","value","id","rating","react_default","createElement","card","className","hoverable","style","width","cover","alt","name","src","image","title","rate","count","tooltips","onChange","_useSelector","useSelector","searchTerm","Movies","filter","movie","toLowerCase","includes","map","components_MovieItem","Object","assign","key","Header","onRandomRateClick","page_header","es_button","onClick","input","event","target","size","placeholder","Main","useEffect","components_Header","components_MovieDeck","initialState","sortDirection","updateItemAndReorder","items","itemIndex","newRatingValue","ratedMovieItem","splice","newPositionOfItem","findIndex","item","push","rootReducer","combineReducers","undefined","action","positionOfItem","reorderedMovies","objectSpread","toConsumableArray","reorderedMoviesWithIndex","store","middlewares","thunkMiddleware","middleWareEnhancer","applyMiddleware","createStore","composeWithDevTools","configureStore","App","es","components_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7726a3a6.chunk.js","sourcesContent":["export async function fetchMovies(): Promise<any> {\r\n  const response = await fetch(\"./movies.json\");\r\n  const data = await response.json();\r\n  return data;\r\n}\r\n\r\nexport const imagesFolderPath = \"images/\";\r\n","import { fetchMovies } from \"../api\";\r\n\r\nexport const LOAD_MOVIES_ACTION = \"LOAD_MOVIES\";\r\nexport const RATE_MOVIE_BY_ID_ACTION = \"RATE_MOVIE_BY_ID\";\r\nexport const RATE_MOVIE_BY_INDEX_ACTION = \"RATE_MOVIE_BY_INDEX\";\r\nexport const SET_RANDOM_RATING_ACTION = \"SET_RANDOM_RATING\";\r\nexport const SET_SEARCH_TERM_ACTON = \"SET_SEARCH_TERM\";\r\n\r\nexport const fetchMoviesAction = () => (dispatch: any) => {\r\n  fetchMovies()\r\n    .then(movies => dispatch({ type: LOAD_MOVIES_ACTION, payload: movies }))\r\n    .catch(err => console.log(err));\r\n};\r\n\r\nexport const startRandomRatingAction = () => (dispatch: any, getState: any) => {\r\n  dispatch({\r\n    type: SET_RANDOM_RATING_ACTION,\r\n    payload: true\r\n  });\r\n\r\n  rateItemRandomly(dispatch, getState);\r\n};\r\n\r\nconst rateItemRandomly = (dispatch: any, getState: any) => {\r\n  const randomTimeMS = getRandomValue(5000, 1000);\r\n\r\n  setTimeout(() => {\r\n    const state = getState();\r\n    const randomItemIndex = getRandomValue(state.movies.movieList.length, 0);\r\n    const randomRateValue = getRandomValue(10, 1);\r\n    /*\r\n    console.log(\"index: \" + randomItemIndex);\r\n    console.log(\"rate: \" + randomRateValue);\r\n    console.log(\"time: \" + randomTimeMS);\r\n    */\r\n    if (state.movies.israndomRatingActive) {\r\n      dispatch({\r\n        type: RATE_MOVIE_BY_INDEX_ACTION,\r\n        payload: { randomIndex: randomItemIndex, randomRating: randomRateValue }\r\n      });\r\n      rateItemRandomly(dispatch, getState);\r\n    }\r\n  }, randomTimeMS);\r\n};\r\n\r\nconst getRandomValue = (range: number, baseValue: number) =>\r\n  Math.round(Math.random() * (range - 1)) + baseValue;\r\n","import React, { useCallback } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Card, Rate } from \"antd\";\r\nimport { Movie } from \"../types\";\r\nimport { RATE_MOVIE_BY_ID_ACTION } from \"../store/actions\";\r\n\r\nimport { imagesFolderPath } from \"../api\";\r\nconst { Meta } = Card;\r\nconst desc = [\r\n  \"1/10\",\r\n  \"2/10\",\r\n  \"3/10\",\r\n  \"4/10\",\r\n  \"5/10\",\r\n  \"6/10\",\r\n  \"7/10\",\r\n  \"8/10\",\r\n  \"9/10\",\r\n  \"10/10\"\r\n];\r\n\r\nconst MovieItem: React.FC<Movie> = (props: Movie) => {\r\n  const dispatch = useDispatch();\r\n  const rateMovie = useCallback(\r\n    (value: number) => {\r\n      dispatch({\r\n        type: RATE_MOVIE_BY_ID_ACTION,\r\n        payload: { id: props.id, rating: value }\r\n      });\r\n    },\r\n    [props, dispatch]\r\n  );\r\n\r\n  return (\r\n    <Card\r\n      className=\"movie-item\"\r\n      hoverable\r\n      style={{ width: 360 }}\r\n      cover={<img alt={props.name} src={imagesFolderPath + props.image} />}\r\n    >\r\n      <Meta className=\"movie-item-title\" title={props.name} />\r\n      <div className=\"movie-item-rating\">\r\n        <Rate\r\n          count={10}\r\n          tooltips={desc}\r\n          onChange={rateMovie}\r\n          value={props.rating}\r\n        />\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default React.memo(MovieItem);\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport MovieItem from \"./MovieItem\";\r\nimport { Movie } from \"../types\";\r\nconst MovieDeck: React.FC = () => {\r\n  const { movieList, searchTerm } = useSelector((state: any) => ({\r\n    movieList: state.movies.movieList,\r\n    searchTerm: state.movies.searchTerm\r\n  }));\r\n\r\n  const Movies = movieList\r\n    .filter(\r\n      (movie: Movie) =>\r\n        searchTerm === \"\" ||\r\n        movie.name.toLowerCase().includes(searchTerm.toLowerCase())\r\n    )\r\n    .map((movie: Movie) => {\r\n      return <MovieItem key={movie.id} {...movie} />;\r\n    });\r\n\r\n  return <div className=\"movie-deck\">{Movies}</div>;\r\n};\r\n\r\nexport default React.memo(MovieDeck);\r\n","import React from \"react\";\r\nimport { PageHeader, Input, Button } from \"antd\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  SET_SEARCH_TERM_ACTON,\r\n  SET_RANDOM_RATING_ACTION\r\n} from \"../store/actions\";\r\nimport { startRandomRatingAction } from \"../store/actions\";\r\nconst Header: React.FC = () => {\r\n  const { searchTerm, israndomRatingActive } = useSelector((state: any) => ({\r\n    israndomRatingActive: state.movies.israndomRatingActive,\r\n    searchTerm: state.movies.searchTerm\r\n  }));\r\n  const dispatch = useDispatch();\r\n\r\n  const onSearch = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    dispatch({ type: SET_SEARCH_TERM_ACTON, payload: event.target.value });\r\n  };\r\n\r\n  const onRandomRateClick = () => {\r\n    //\r\n    if (israndomRatingActive) {\r\n      dispatch({\r\n        type: SET_RANDOM_RATING_ACTION,\r\n        payload: false\r\n      });\r\n    } else {\r\n      dispatch(startRandomRatingAction());\r\n    }\r\n  };\r\n\r\n  return (\r\n    <PageHeader className=\"page-header\" title=\"My Favourite Movies App\">\r\n      <div className=\"header-content\">\r\n        <Button\r\n          className=\"random-button\"\r\n          onClick={() => onRandomRateClick()}\r\n          type={israndomRatingActive ? \"danger\" : \"primary\"}\r\n        >\r\n          {israndomRatingActive ? \"Stop Random Rating\" : \"Start Random Rating\"}\r\n        </Button>\r\n        <Input\r\n          className=\"search-input\"\r\n          onChange={onSearch}\r\n          value={searchTerm}\r\n          size=\"default\"\r\n          placeholder=\"Search...\"\r\n        />\r\n      </div>\r\n    </PageHeader>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { fetchMoviesAction } from \"../store/actions\";\r\nimport MovieDeck from \"./MovieDeck\";\r\nimport Header from \"./Header\";\r\nconst Main: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchMoviesAction());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <Header />\r\n      <MovieDeck />\r\n    </div>\r\n  );\r\n};\r\nexport default Main;\r\n","import { Movie } from \"../types\";\r\nimport {\r\n  LOAD_MOVIES_ACTION,\r\n  SET_RANDOM_RATING_ACTION,\r\n  RATE_MOVIE_BY_ID_ACTION,\r\n  RATE_MOVIE_BY_INDEX_ACTION,\r\n  SET_SEARCH_TERM_ACTON\r\n} from \"./actions\";\r\n\r\ninterface MoviesState {\r\n  movieList: Movie[];\r\n  sortDirection: \"asc\" | \"desc\" | \"\";\r\n  searchTerm: string;\r\n  israndomRatingActive: boolean;\r\n}\r\n\r\nconst initialState: MoviesState = {\r\n  movieList: [],\r\n  sortDirection: \"\",\r\n  searchTerm: \"\",\r\n  israndomRatingActive: false\r\n};\r\n\r\nexport function moviesReducer(state: MoviesState = initialState, action: any) {\r\n  switch (action.type) {\r\n    case LOAD_MOVIES_ACTION:\r\n      return {\r\n        movieList: action.payload,\r\n        sortDirection: \"\",\r\n        searchTerm: \"\",\r\n        israndomRatingActive: false\r\n      } as MoviesState;\r\n    case RATE_MOVIE_BY_ID_ACTION:\r\n      let positionOfItem = -1;\r\n      //get the position of rated item\r\n      positionOfItem = state.movieList.findIndex(\r\n        item => item.id === action.payload.id\r\n      );\r\n\r\n      //if not exist do nothing\r\n      if (positionOfItem < 0) {\r\n        return state;\r\n      }\r\n\r\n      const reorderedMovies = updateItemAndReorder(\r\n        state.movieList,\r\n        positionOfItem,\r\n        action.payload.rating\r\n      );\r\n\r\n      return {\r\n        ...state,\r\n        movieList: [...reorderedMovies]\r\n      } as MoviesState;\r\n    case RATE_MOVIE_BY_INDEX_ACTION:\r\n      const reorderedMoviesWithIndex = updateItemAndReorder(\r\n        state.movieList,\r\n        action.payload.randomIndex,\r\n        action.payload.randomRating\r\n      );\r\n      return {\r\n        ...state,\r\n        movieList: [...reorderedMoviesWithIndex]\r\n      } as MoviesState;\r\n    case SET_SEARCH_TERM_ACTON:\r\n      return { ...state, searchTerm: action.payload };\r\n    case SET_RANDOM_RATING_ACTION:\r\n      return { ...state, israndomRatingActive: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// for performance efficiency concerns i am not sorting full array for each rate change\r\n// just adding rated item to correct array index\r\n// by this way we are keeping items are sorted\r\n//because sorting whole array in each change may be some bad performance affects espically big sizes of data\r\nconst updateItemAndReorder = (\r\n  items: Movie[],\r\n  itemIndex: number,\r\n  newRatingValue: number\r\n): Movie[] => {\r\n  // splice  rated item from list and set new rating value\r\n  const ratedMovieItem = items.splice(itemIndex, 1)[0];\r\n  ratedMovieItem.rating = newRatingValue;\r\n\r\n  //find new position for rated item the position\r\n  //find the first smaller or equal rated items position\r\n  let newPositionOfItem = -1;\r\n  newPositionOfItem = items.findIndex(\r\n    item => item.rating <= ratedMovieItem.rating\r\n  );\r\n\r\n  //set item to this position.\r\n  if (newPositionOfItem > -1) {\r\n    items.splice(newPositionOfItem, 0, ratedMovieItem);\r\n  } else {\r\n    items.push(ratedMovieItem);\r\n  }\r\n\r\n  return items;\r\n};\r\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { moviesReducer } from \"./reducers\";\r\n\r\nexport const rootReducer = combineReducers({ movies: moviesReducer });\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nexport default function configureStore() {\r\n  const middlewares = [thunkMiddleware];\r\n  const middleWareEnhancer = applyMiddleware(...middlewares);\r\n\r\n  const store = createStore(\r\n    rootReducer,\r\n    composeWithDevTools(middleWareEnhancer)\r\n  );\r\n\r\n  return store;\r\n}\r\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport \"antd/dist/antd.css\";\nimport \"./App.css\";\nimport Main from \"./components/Main\";\nimport configureStore from \"./store\";\n\nconst store = configureStore();\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <Main />\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}